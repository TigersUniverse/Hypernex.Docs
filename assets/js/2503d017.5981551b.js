"use strict";(self.webpackChunkhypernex_docs=self.webpackChunkhypernex_docs||[]).push([[6812],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),d=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=d(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=d(a),k=r,h=c["".concat(p,".").concat(k)]||c[k]||m[k]||l;return a?n.createElement(h,i(i({ref:t},s),{},{components:a})):n.createElement(h,i({ref:t},s))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[c]="string"==typeof e?e:r,i[1]=o;for(var d=2;d<l;d++)i[d]=a[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},10733:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var n=a(87462),r=(a(67294),a(3905));const l={},i="Physics",o={unversionedId:"engine-api/handlers/physics/index",id:"engine-api/handlers/physics/index",title:"Physics",description:"A toolbox for anything Physics related.",source:"@site/docs/engine-api/handlers/physics/index.md",sourceDirName:"engine-api/handlers/physics",slug:"/engine-api/handlers/physics/",permalink:"/docs/engine-api/handlers/physics/",draft:!1,editUrl:"https://github.com/TigersUniverse/Hypernex.Docs/docs/engine-api/handlers/physics/index.md",tags:[],version:"current",frontMatter:{},sidebar:"engineSidebar",previous:{title:"SendToServer",permalink:"/docs/engine-api/handlers/network/sendtoserver"},next:{title:"Players",permalink:"/docs/engine-api/handlers/players/"}},p={},d=[{value:"Methods",id:"methods",level:2},{value:"Properties",id:"properties",level:2}],s={toc:d},c="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"physics"},"Physics"),(0,r.kt)("p",null,"A toolbox for anything Physics related."),(0,r.kt)("p",null,"To get the Physics class, you must ",(0,r.kt)("a",{parentName:"p",href:"/docs/engine-api/handlers/"},"get its handler"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'let Physics = instance.GetHandler("Physics")\n')),(0,r.kt)("p",null,"You can then use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Physics")," property to access the Physics class."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Return Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CheckBox"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float4/"},"float4"),"\xb9"),(0,r.kt)("td",{parentName:"tr",align:null},"Check whether the given box overlaps with other colliders or not")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CheckCapsule"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"Checks if any colliders overlap a capsule-shaped volume in world space")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"CheckSphere"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if there are any colliders overlapping the sphere defined by position and radius in world coordinates")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ClosestPoint"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/collider/"},"Collider"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float4/"},"float4")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns a point on the given collider that is closest to the specified location")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ComputePenetration"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/penetrationresult/"},"PenetrationResult")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/collider/"},"Collider"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float4/"},"float4"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/collider/"},"Collider"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),". ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float4/"},"float4")),(0,r.kt)("td",{parentName:"tr",align:null},"Computes the minimal translation required to separate the given colliders apart at specified poses.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SetCollisionIgnore"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"void")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/collider/"},"Collider"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/collider/"},"Collider"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"Sets ability to collide between two colliders")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Linecast"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3")),(0,r.kt)("td",{parentName:"tr",align:null},"Returns true if there is any collider intersecting the line between start and end")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OverlapBox"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/collider/"},"Collider"),"[]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float4/"},"float4"),"\xb9"),(0,r.kt)("td",{parentName:"tr",align:null},"Finds all colliders touching inside of the given box")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OverlapCapsule"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/collider/"},"Collider"),"[]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"Checks the given capsule against the physics world and returns all overlapping colliders")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OverlapSphere"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/collider/"},"Collider"),"[]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"Computes colliders touching or that are inside the sphere")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Raycast"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/raycasthit/"},"RaycastHit"),"[]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/ray/"},"Ray"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"float"),"\xb2"),(0,r.kt)("td",{parentName:"tr",align:null},"Casts a ray through the Scene and returns all hits")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"RaycastAll"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/raycasthit/"},"RaycastHit"),"[]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/ray/"},"Ray"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"float"),"\xb2"),(0,r.kt)("td",{parentName:"tr",align:null},"Casts a ray through the Scene and returns all hits")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SphereCast"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/raycasthit/"},"RaycastHit"),"[]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"float"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"float"),"\xb2"),(0,r.kt)("td",{parentName:"tr",align:null},"Casts a sphere along the direction and returns all hits")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"SphereCastAll"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/raycasthit/"},"RaycastHit"),"[]"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"float"),", ",(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"float"),"\xb2"),(0,r.kt)("td",{parentName:"tr",align:null},"Casts a sphere along the direction and returns all hits")))),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"gravity"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"/docs/engine-api/float3/"},"float3")),(0,r.kt)("td",{parentName:"tr",align:null},"The current gravity in a world")))),(0,r.kt)("hr",null),(0,r.kt)("p",null,"\xb9 Optional Parameter"),(0,r.kt)("p",null,"\xb2 ",(0,r.kt)("a",{parentName:"p",href:"/docs/engine-api/mathf/"},"MathF.Infinity")))}m.isMDXComponent=!0}}]);