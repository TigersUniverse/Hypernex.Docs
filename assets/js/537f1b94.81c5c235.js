"use strict";(self.webpackChunkhypernex_docs=self.webpackChunkhypernex_docs||[]).push([[4560],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(t),m=o,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||i;return t?r.createElement(h,a(a({ref:n},p),{},{components:t})):r.createElement(h,a({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},41970:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=t(87462),o=(t(67294),t(3905));const i={sidebar_position:0},a="API Server Setup",s={unversionedId:"hosting-docs/setup/setupapi",id:"hosting-docs/setup/setupapi",title:"API Server Setup",description:"This guide will show you how to setup your own API server.",source:"@site/docs/hosting-docs/setup/setupapi.md",sourceDirName:"hosting-docs/setup",slug:"/hosting-docs/setup/setupapi",permalink:"/docs/hosting-docs/setup/setupapi",draft:!1,editUrl:"https://github.com/TigersUniverse/Hypernex.Docs/docs/hosting-docs/setup/setupapi.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"hostingSidebar",previous:{title:"Setup",permalink:"/docs/hosting-docs/setup/"},next:{title:"Setup CDN",permalink:"/docs/hosting-docs/setup/setupcdn"}},l={},u=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setting up the API Environment",id:"setting-up-the-api-environment",level:2},{value:"Configure",id:"configure",level:2},{value:"Running the Server",id:"running-the-server",level:2},{value:"Forever (Recommended)",id:"forever-recommended",level:3},{value:"Tmux",id:"tmux",level:3}],p={toc:u},c="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"api-server-setup"},"API Server Setup"),(0,o.kt)("p",null,"This guide will show you how to setup your own API server."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Redis Database"),(0,o.kt)("li",{parentName:"ul"},"Mongodb Database"),(0,o.kt)("li",{parentName:"ul"},"DigitalOcean Space or some other S3 Bucket"),(0,o.kt)("li",{parentName:"ul"},"Domain with a valid A record"),(0,o.kt)("li",{parentName:"ul"},"A Linux (recommended Ubuntu) Server with Node.JS installed")),(0,o.kt)("h2",{id:"setting-up-the-api-environment"},"Setting up the API Environment"),(0,o.kt)("p",null,"To setup the API Server, simply download the source code from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/TigersUniverse/Hypernex.API"},"Hypernex.API"),". This can go in any directory you'd like."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Uploads are saved to disk before being moved to the cloud, so if you are handling a lot of uploads at once, be sure to give Hypernex sufficient storage.")),(0,o.kt)("p",null,"Then, with all the files, run ",(0,o.kt)("inlineCode",{parentName:"p"},"npm i")," to download all the required packages."),(0,o.kt)("p",null,"After which, you can continue to configuring."),(0,o.kt)("h2",{id:"configure"},"Configure"),(0,o.kt)("p",null,"To generate the Config file, run ",(0,o.kt)("inlineCode",{parentName:"p"},"node main.js")," once, and the program should notice there is no config, and stop. The config is located in the same directory as ",(0,o.kt)("inlineCode",{parentName:"p"},"main.js")," and is called ",(0,o.kt)("inlineCode",{parentName:"p"},"config.json"),". A normal config looks something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "BaseURL": "http://localhost/",\n    "CDNURLs": ["http://localhost:3333/"],\n    "DatabaseInfo": {\n        "DatabaseNumber": 0,\n        "Host": "",\n        "Port": 0,\n        "Username": "",\n        "Password": "",\n        "UseDatabaseTLS": false,\n        "DatabaseTLS": {\n            "TLSKeyLocation": "",\n            "TLSCertificateLocation": "",\n            "TLSCALocation": ""\n        }\n    },\n    "MongoDBURL": "",\n    "SpacesInfo": {\n        "AccessKeyId": "",\n        "SecretAccessKey": "",\n        "Region": "",\n        "SpaceName": ""\n    },\n    "MaxFileSize": 1000,\n    "TrustAllDomains": false,\n    "AllowedDomains": [],\n    "UseHTTPS": false,\n    "HTTPSTLS": {\n        "TLSKeyLocation": "",\n        "TLSCertificateLocation": ""\n    },\n    "SocketPort": 2096,\n    "WebRoot": "../Web",\n    "HTMLPaths": {\n        "EmailVerificationPath": "emailhtml/verifyEmail.html",\n        "ResetPasswordPath": "emailhtml/resetPassword.html"\n    },\n    "SignupRules": {\n        "RequireInviteCode": false,\n        "GlobalInviteCodes": [],\n        "RemoveCodeAfterUse": true\n    },\n    "AVSettings":{\n        "ScanFiles": false,\n        "clamdPort": null,\n        "clamdHost": null,\n        "clamdTimeout": null,\n        "clamdHealthCheckInterval": null\n    },\n    "EmailInterface": "sendmail",\n    "SMTPSettings":{\n        "Server": "",\n        "Port": 465,\n        "Secure": true,\n        "NoTLS": false,\n        "Username": "",\n        "Password": "",\n        "OverrideDomain": ""\n    },\n    "GameServerTokens": [],\n    "AllowAnyGameServer": false,\n    "GameEngine": "Unity",\n    "GameEngineVersion": "2023.2.20f1"\n}\n')),(0,o.kt)("p",null,"The config names should be self explanatory, so configure as needed."),(0,o.kt)("p",null,"After configuration, it's time to run the server!"),(0,o.kt)("h2",{id:"running-the-server"},"Running the Server"),(0,o.kt)("p",null,"There are two ways you can run the server."),(0,o.kt)("h3",{id:"forever-recommended"},"Forever (Recommended)"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/forever"},"forever")," is a package that will automatically restart a node program, if it exits for any reason."),(0,o.kt)("p",null,"To use forever, simply install it globally, then run the server."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"npm i forever -g\nforever start main.js\n")),(0,o.kt)("h3",{id:"tmux"},"Tmux"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tmux")," command will create an environment where you can exit your SSH client, without killing the node process."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"tmux\nnode main.js\n")),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Tmux will NOT automatically restart the node program if it is killed.")))}d.isMDXComponent=!0}}]);