"use strict";(self.webpackChunkhypernex_docs=self.webpackChunkhypernex_docs||[]).push([[4475],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,h=d["".concat(s,".").concat(c)]||d[c]||m[c]||r;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1421:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const r={},l="2024.05.1b",o={unversionedId:"changelogs/Hypernex.Unity/2024051b",id:"changelogs/Hypernex.Unity/2024051b",title:"2024.05.1b",description:"Huge update once again, this time, focusing more on the user frontend experience and heavily refactoring the backend for developers to extend support for their devices/software. Finger tracking, new animator, Facial Tracking API additions, desktop gestures, better gestures, VideoPlayer API, invite requests, and so much more!",source:"@site/docs/changelogs/Hypernex.Unity/2024051b.md",sourceDirName:"changelogs/Hypernex.Unity",slug:"/changelogs/Hypernex.Unity/2024051b",permalink:"/docs/changelogs/Hypernex.Unity/2024051b",draft:!1,editUrl:"https://github.com/TigersUniverse/Hypernex.Docs/docs/changelogs/Hypernex.Unity/2024051b.md",tags:[],version:"current",frontMatter:{},sidebar:"changelogSidebar",previous:{title:"2024.03.1b",permalink:"/docs/changelogs/Hypernex.Unity/2024031b"},next:{title:"1.3.0",permalink:"/docs/changelogs/Hypernex.Web/130"}},s={},p=[{value:"Changes",id:"changes",level:2},{value:"API Changes",id:"api-changes",level:2},{value:"BadgeRankHandler",id:"badgerankhandler",level:3},{value:"IVideoPlayer",id:"ivideoplayer",level:3},{value:"IGestureIdentifier",id:"igestureidentifier",level:3},{value:"IFingerCurler",id:"ifingercurler",level:3},{value:"ICustomFaceExpression",id:"icustomfaceexpression",level:3},{value:"SmoothFloat",id:"smoothfloat",level:3},{value:"RotationOffsetDriver",id:"rotationoffsetdriver",level:3}],u={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2024051b"},"2024.05.1b"),(0,i.kt)("p",null,"Huge update once again, this time, focusing more on the user frontend experience and heavily refactoring the backend for developers to extend support for their devices/software. Finger tracking, new animator, Facial Tracking API additions, desktop gestures, better gestures, VideoPlayer API, invite requests, and ",(0,i.kt)("em",{parentName:"p"},"so much more"),"!"),(0,i.kt)("h2",{id:"changes"},"Changes"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Added Finger Tracking",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"All Avatars now have their fingers tracked from the current ",(0,i.kt)("inlineCode",{parentName:"li"},"IFingerCurler")," interface."),(0,i.kt)("li",{parentName:"ul"},"Developers, see below for more information on ",(0,i.kt)("inlineCode",{parentName:"li"},"IFingerCurler")))),(0,i.kt)("li",{parentName:"ul"},"Desktop Crouching",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Hit ",(0,i.kt)("inlineCode",{parentName:"li"},"C")," to crouch"))),(0,i.kt)("li",{parentName:"ul"},"Desktop Crawling",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Hit ",(0,i.kt)("inlineCode",{parentName:"li"},"X")," to crawl"))),(0,i.kt)("li",{parentName:"ul"},"New default Animation/Animators",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This new Animator includes the following animations",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Walk",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Walk Forward"),(0,i.kt)("li",{parentName:"ul"},"Walk Backward"),(0,i.kt)("li",{parentName:"ul"},"Walk Left"),(0,i.kt)("li",{parentName:"ul"},"Walk Right"))),(0,i.kt)("li",{parentName:"ul"},"Run",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Run Forward"),(0,i.kt)("li",{parentName:"ul"},"Run Backward"),(0,i.kt)("li",{parentName:"ul"},"Run Left"),(0,i.kt)("li",{parentName:"ul"},"Run Right"))),(0,i.kt)("li",{parentName:"ul"},"Crouch",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Crouch Walk"),(0,i.kt)("li",{parentName:"ul"},"Crouch Walk Left"),(0,i.kt)("li",{parentName:"ul"},"Crouch Walk Right"))),(0,i.kt)("li",{parentName:"ul"},"Lay Down",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Crawl"))),(0,i.kt)("li",{parentName:"ul"},"Jump"),(0,i.kt)("li",{parentName:"ul"},"Falling",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Falling Idle"))),(0,i.kt)("li",{parentName:"ul"},"Left Hand Finger Curling"),(0,i.kt)("li",{parentName:"ul"},"Right Hand Finger Curling"))))),(0,i.kt)("li",{parentName:"ul"},"Desktop Finger Tracking",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Hold Left Shift for the Left Hand"),(0,i.kt)("li",{parentName:"ul"},"Hold Right Shift for the Right Hand"),(0,i.kt)("li",{parentName:"ul"},"While holding a Shift, hit a number from 1-9 to activate a Gesture in order of its properties, as listed below:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Fist (1), OpenHand (2), Point (3), Peace (4), OkHand (5), RockAndRoll (6), Gun (7), ThumbsUp (8)"),(0,i.kt)("li",{parentName:"ul"},"The current GestureIdentifier does not change the numbers hit, but will change what number the gesture returns"))))),(0,i.kt)("li",{parentName:"ul"},"Added Invite Requests",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If your friend is in a world and not on DoNotDisturb status, you will see a Request button on their profile. Upon selecting the Request button, an Invite Request will be sent to the user."),(0,i.kt)("li",{parentName:"ul"},"The user you sent the invite request to can decide to accept the invite request"))),(0,i.kt)("li",{parentName:"ul"},"Added Badge Implementation with ",(0,i.kt)("inlineCode",{parentName:"li"},"BadgeRankHandler"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"See API changes for more information"))),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"UnityVideoPlayer")," as an integration of ",(0,i.kt)("inlineCode",{parentName:"li"},"IVideoPlayer"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This will be expanded to add support for other video players in the future"))),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"IGestureIdentifier")," for creating custom Gesture numbers",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"By default, these are the current implementations",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HypernexGesture")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CGesture")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"VGesture")))),(0,i.kt)("li",{parentName:"ul"},"You can change which GestureIdentifier you are using in the User tab in Settings"),(0,i.kt)("li",{parentName:"ul"},"See API changes for more information"))),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"IFingerCurler")," for creating custom Finger Curlers",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"By default, there are three implementations",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DesktopFingerCurler.Left"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For Desktop, Left Hand"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"DesktopFingerCurler.Right"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For Desktop, Right Hand"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HandGetter"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For VR"))))),(0,i.kt)("li",{parentName:"ul"},"See API changes for more information"))),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"ICustomFaceExpression")," for creating custom Facial Expressions from ",(0,i.kt)("inlineCode",{parentName:"li"},"VRCFaceTracking")," data",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"For example, there are three implementations",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CombinedEyeLid")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TongueX")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TongueY")))),(0,i.kt)("li",{parentName:"ul"},"See API changes for more information"))),(0,i.kt)("li",{parentName:"ul"},"Smoothened networked weights",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This makes weight changed feel smoother, without ruining the quality of the value"))),(0,i.kt)("li",{parentName:"ul"},"Added ",(0,i.kt)("inlineCode",{parentName:"li"},"SmoothFloat")," for smoothening a float value",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"See API changes for more information"))),(0,i.kt)("li",{parentName:"ul"},"Reworked ",(0,i.kt)("inlineCode",{parentName:"li"},"FingerCalibration")," for the new system of Finger Curling."),(0,i.kt)("li",{parentName:"ul"},"Added ability for ",(0,i.kt)("inlineCode",{parentName:"li"},"AnimatorCreator.SetParameter<T>(string, T, CustomPlayableAnimator, bool, bool)")," to set parameters in the ",(0,i.kt)("inlineCode",{parentName:"li"},"MainAnimator")),(0,i.kt)("li",{parentName:"ul"},"Created ",(0,i.kt)("inlineCode",{parentName:"li"},"RotationOffsetDriver")," to handle offset rotations for ",(0,i.kt)("inlineCode",{parentName:"li"},"AvatarCreator"),"s.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"See API changes for more information"))),(0,i.kt)("li",{parentName:"ul"},"All HandleCameras are now destroyed upon leaving or joining an instance",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This is a temporary addition until the planned Cameras menu is added"))),(0,i.kt)("li",{parentName:"ul"},"Fixed a bug where FullBody-Tracking would not work"),(0,i.kt)("li",{parentName:"ul"},"Fixed a bug where FullBody Trackers would not be registered as ",(0,i.kt)("inlineCode",{parentName:"li"},"IsTracking")," when they were tracking",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"This fix is mostly a hack, so if you see a tracker dot at center not tracking, just wait a couple of seconds before it disappears."))),(0,i.kt)("li",{parentName:"ul"},"Fixed bug where a NetPlayer's hips would not move or rotate when using Full-Body Tracking"),(0,i.kt)("li",{parentName:"ul"},"Fixed bug where you could not create more than one HandleCamera")),(0,i.kt)("h2",{id:"api-changes"},"API Changes"),(0,i.kt)("h3",{id:"badgerankhandler"},"BadgeRankHandler"),(0,i.kt)("p",null,"The new ",(0,i.kt)("inlineCode",{parentName:"p"},"BadgeRankHandler")," allows publishers to edit nameplates to handle Ranks for Badges. Here is an example of a verified badge being added to users with the verified rank."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"BadgeRankHandler ",(0,i.kt)("strong",{parentName:"p"},"MUST")," have a public, parameter-less constructor, otherwise the base class will throw an exception!")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'using System.Linq;\nusing Hypernex.UI.Templates;\nusing HypernexSharp.APIObjects;\nusing TMPro;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class VerifiedRank : BadgeRankHandler\n{\n    // This is for ranks only\n    public override bool IsRank => true;\n    // These are the ranks this will Apply to\n    public override Rank[] TargetRanks => new[]{Rank.Verified, Rank.Moderator, Rank.Admin, Rank.Owner};\n\n    public override void ApplyToNameplate(NameplateTemplate nameplateTemplate, User targetUser)\n    {\n        // We store any assets in the Init.BadgeRankAssets list of Objects, then just cast it to the type it is\n        Texture2D verifiedTexture = (Texture2D) Init.Instance.BadgeRankAssets.ElementAt(2);\n        // Working off of the status image, because it already has positioning and sizing done\n        RectTransform dup = Object.Instantiate(nameplateTemplate.Status).GetComponent<RectTransform>();\n        // Reparent if it isn\'t\n        dup.SetParent(nameplateTemplate.Status.transform.parent, false);\n        // Set its name\n        dup.gameObject.name = "ModeratorIcon";\n        // Move it up to the right-corner of the pfp\n        dup.anchoredPosition3D = new Vector3(dup.anchoredPosition3D.x, dup.anchoredPosition3D.y + 82f, 0);\n        // Get the image component\n        Image img = dup.gameObject.GetComponent<Image>();\n        // Reset the color, since the Status icon changes colors\n        img.color = Color.white;\n        // Create a sprite from the texture, and set the image to that sprite\n        img.sprite = Sprite.Create(verifiedTexture, new Rect(0f, 0f, verifiedTexture.width, verifiedTexture.height),\n            Vector2.zero);\n    }\n}\n')),(0,i.kt)("p",null,"Here is an example that will add an icon if you have a specific badge and are verified rank."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'using System.Linq;\nusing Hypernex.UI.Templates;\nusing HypernexSharp.APIObjects;\nusing TMPro;\nusing UnityEngine;\nusing UnityEngine.UI;\n\npublic class VerifiedRankLeafBadge : BadgeRankHandler\n{\n    // While this requires a rank, we want this at false since its dependent on a badge\n    // You will also want your rank handler (if present) to check and see if you have this badge\n    // If you do have the badge, make sure ApplyToNameplate in the rank handler does not run\n    public override bool IsRank => false;\n    // Name of the badge (caps sensitive)\n    public override string Name => "leaf";\n\n    private readonly Color verifiedLeafColor = new(70f/255f, 180f/255f, 48f/255f);\n\n    public override void ApplyToNameplate(NameplateTemplate nameplateTemplate, User targetUser)\n    {\n        // Don\'t run if the user is not Verified\n        if(targetUser.Rank < Rank.Verified) return;\n        // Get the texture from the Init.BadgeRankAssets field\n        Texture2D verifiedTexture = (Texture2D) Init.Instance.BadgeRankAssets.ElementAt(3);\n        // Duplicate the status icon\n        RectTransform dup = Object.Instantiate(nameplateTemplate.Status).GetComponent<RectTransform>();\n        dup.SetParent(nameplateTemplate.Status.transform.parent, false);\n        dup.gameObject.name = "VerifiedLeafIcon";\n        // Position the icon to the top right of the pfp\n        dup.anchoredPosition3D = new Vector3(dup.anchoredPosition3D.x, dup.anchoredPosition3D.y + 82f, 0);\n        Image img = dup.gameObject.GetComponent<Image>();\n        img.color = Color.white;\n        img.sprite = Sprite.Create(verifiedTexture, new Rect(0f, 0f, verifiedTexture.width, verifiedTexture.height),\n            Vector2.zero);\n        // Set the color of the username text to the color defined above\n        nameplateTemplate.Username.color = verifiedLeafColor;\n    }\n}\n')),(0,i.kt)("h3",{id:"ivideoplayer"},"IVideoPlayer"),(0,i.kt)("p",null,"A new interface used to define support for VideoPlayer backends. Currently, this is only used to implement the already supported Unity VideoPlayer, but the vision is to add support for Virtual's ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/VirtualBrightPlayz/FFmpeg.Unity"},"FFmpeg.Unity")," and possibly ",(0,i.kt)("a",{parentName:"p",href:"https://code.videolan.org/videolan/vlc-unity"},"vlc-unity")," (if I can ever figure out how to build it \ud83d\ude2d)"),(0,i.kt)("p",null,"You can see an example implementation of the UnityVideoPlayer ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/TigersUniverse/Hypernex.Unity/blob/main/Assets/Scripts/Game/Video/UnityVideoPlayer.cs"},"here")),(0,i.kt)("h3",{id:"igestureidentifier"},"IGestureIdentifier"),(0,i.kt)("p",null,"This interface was designed to be easily serializable and instantiable by developers (especially for plugins). It allows you to drive custom integer values for the ",(0,i.kt)("inlineCode",{parentName:"p"},"GestureLeft")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"GestureRight")," avatar parameters. Here is an example implementation of Hypernex's gestures."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'public class HypernexGesture : IGestureIdentifier\n{\n    public string Name => "Hypernex";\n    public int Unknown => 0;\n    public int Fist => 1;\n    public int OpenHand => 2;\n    public int Point => 3;\n    public int Peace => 4;\n    public int OkHand => 5;\n    public int RockAndRoll => 6;\n    public int Gun => 7;\n    public int ThumbsUp => 8;\n}\n')),(0,i.kt)("p",null,"The extra ",(0,i.kt)("inlineCode",{parentName:"p"},"Name")," property is used to identify the GestureIdentifier for Config values. Be sure to not have conflicting names!"),(0,i.kt)("h3",{id:"ifingercurler"},"IFingerCurler"),(0,i.kt)("p",null,"This interface was specifically designed for developers to implement their own hardware via. plugins. It allows developers to drive the finger curl values for each hand. The hand is identified with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Hand")," property as either ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Right"),". All of the float properties are values from ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," describing how much the finger is curled, where ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," is not curled and ",(0,i.kt)("inlineCode",{parentName:"p"},"1")," is completely curled; however, if you need the values to describe something different, override the ",(0,i.kt)("inlineCode",{parentName:"p"},"IsCurled")," method. Here is a bare-bones implementation of the interface:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public class MyRandomFingerCurler : IFingerCurler\n{\n    public Hand Hand { get; private set; }\n    private Random random;\n\n    public MyRandomFingerCurler(bool isRight = false)\n    {\n        Hand = isRight ? Hand.Right : Hand.Left;\n        random = new Random();\n    }\n\n    public MyRandomFingerCurler(int seed, bool isRight = false)\n    {\n        Hand = isRight ? Hand.Right : Hand.Left;\n        random = new Random(seed);\n    }\n\n    private float RandomFloat() => (float) random.NextDouble();\n\n    public float ThumbCurl => RandomFloat();\n    public float IndexCurl => RandomFloat();\n    public float MiddleCurl => RandomFloat();\n    public float RingCurl => RandomFloat();\n    public float PinkyCurl => RandomFloat();\n}\n")),(0,i.kt)("p",null,"This class will register a random finger curler, so each time the Curl value is accessed, a random value between 0 and 1 will be returned."),(0,i.kt)("h3",{id:"icustomfaceexpression"},"ICustomFaceExpression"),(0,i.kt)("p",null,"This interface is once again designed for developers to implement custom facial expressions with VRCFaceTracking's UnifiedTrackingData. Eventually, it will be what implements all of v2 parameters, since I can't figure out how IParameters work without OSC and because it allows greater control for parameters."),(0,i.kt)("p",null,"Here is an example implementation of combining eye lids:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},'public class CombinedEyeLid : ICustomFaceExpression\n{\n    public string Name => "CombinedEyeLid";\n\n    public float GetWeight(UnifiedTrackingData data) => (data.Eye.Left.Openness + data.Eye.Right.Openness) / 2;\n}\n')),(0,i.kt)("h3",{id:"smoothfloat"},"SmoothFloat"),(0,i.kt)("p",null,"SmoothFloat is a new tool that allows float values to be smoothly moved from value A to value B. The example below demonstrates how to use a SmoothFloat for a weight."),(0,i.kt)("admonition",{type:"warning"},(0,i.kt)("p",{parentName:"admonition"},"SmoothFloats are ",(0,i.kt)("strong",{parentName:"p"},"NOT")," thread-safe. Do not touch them outside of the main thread.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cs"},"public class MySmoothWeightHandler\n{\n    private SmoothFloat smoothFloat = new SmoothFloat();\n\n    public MySmoothWeightHandler(Action<float> onSmoothWeight) => onSmoothWeight += OnWeightValue;\n\n    // This will be smoothened\n    public void GetValue() => smoothFloat.Value;\n\n    void OnWeightValue(float value) => smoothFloat.Value = value;\n}\n")),(0,i.kt)("h3",{id:"rotationoffsetdriver"},"RotationOffsetDriver"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"RotationOffsetDriver")," is a tool that will allow transforms to be rotated regardless of the bone's tracking space. This is useful for avatars that were ported from other engines that do not follow Unity's tracking space."),(0,i.kt)("p",null,"You can see how they are implemented for Head tracking on avatars ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/TigersUniverse/Hypernex.Unity/blob/main/Assets/Scripts/Game/Avatar/AvatarCreator.cs#L69"},"here")))}m.isMDXComponent=!0}}]);