"use strict";(self.webpackChunkhypernex_docs=self.webpackChunkhypernex_docs||[]).push([[5628],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),h=a,m=c["".concat(s,".").concat(h)]||c[h]||u[h]||o;return n?r.createElement(m,l(l({ref:t},d),{},{components:n})):r.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=h;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},88212:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},l="1.2.0",i={unversionedId:"changelogs/Hypernex.Networking/120",id:"changelogs/Hypernex.Networking/120",title:"1.2.0",description:"A lot of API changes for Hypernex.Unity to work correctly. It is important that developers and creators read this (and the 2024.03.1b update) to understand what needs to be updated.",source:"@site/docs/changelogs/Hypernex.Networking/120.md",sourceDirName:"changelogs/Hypernex.Networking",slug:"/changelogs/Hypernex.Networking/120",permalink:"/docs/changelogs/Hypernex.Networking/120",draft:!1,editUrl:"https://github.com/TigersUniverse/Hypernex.Docs/docs/changelogs/Hypernex.Networking/120.md",tags:[],version:"current",frontMatter:{},sidebar:"changelogSidebar",previous:{title:"1.4.4",permalink:"/docs/changelogs/Hypernex.CCK/144"},next:{title:"1.2.1",permalink:"/docs/changelogs/Hypernex.Networking/121"}},s={},p=[{value:"Changes",id:"changes",level:2},{value:"API Changes",id:"api-changes",level:2},{value:"Removal of NetPlayer",id:"removal-of-netplayer",level:3},{value:"Renaming of <code>NetPlayers</code> to <code>Instance</code>",id:"renaming-of-netplayers-to-instance",level:3}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"120"},"1.2.0"),(0,a.kt)("p",null,"A lot of API changes for Hypernex.Unity to work correctly. It is important that developers and creators read this (and the 2024.03.1b update) to understand what needs to be updated."),(0,a.kt)("h2",{id:"changes"},"Changes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Removed Player Object and Weight caching",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This was a huge waste of memory, without this, servers will be much more optimized"))),(0,a.kt)("li",{parentName:"ul"},"Added ",(0,a.kt)("inlineCode",{parentName:"li"},"PlayerDataUpdate"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Meant to update Tags and Extraneous data from the client"))),(0,a.kt)("li",{parentName:"ul"},"PlayerObjectUpdate is now only available as an array of objects",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This is to reduce bandwidth with compression"))),(0,a.kt)("li",{parentName:"ul"},"Added ",(0,a.kt)("inlineCode",{parentName:"li"},"MathF")),(0,a.kt)("li",{parentName:"ul"},"Added ",(0,a.kt)("inlineCode",{parentName:"li"},"ScriptEvent.OnPlayerUpdate")),(0,a.kt)("li",{parentName:"ul"},"Added ",(0,a.kt)("inlineCode",{parentName:"li"},"ScriptEvent.OnWeight")),(0,a.kt)("li",{parentName:"ul"},"Added ",(0,a.kt)("inlineCode",{parentName:"li"},"ScriptEvent.OnPlayerTags")),(0,a.kt)("li",{parentName:"ul"},"Added ",(0,a.kt)("inlineCode",{parentName:"li"},"ScriptEvent.OnPlayerExtraneousObject")),(0,a.kt)("li",{parentName:"ul"},"Added VRIK properties to PlayerUpdate",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"IsFBT")," (bool)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Whether the player is playing VR with Full-Body Tracking"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"VRIKJson")," (string)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The VRIK CalibrationData serialized as a JSON string"))))),(0,a.kt)("li",{parentName:"ul"},"Renamed ",(0,a.kt)("inlineCode",{parentName:"li"},"NetPlayers")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"Instance")),(0,a.kt)("li",{parentName:"ul"},"Removed ",(0,a.kt)("inlineCode",{parentName:"li"},"NetPlayer")),(0,a.kt)("li",{parentName:"ul"},"Fixed issue where Hypernex.Networking.Server would not exit when given the exit command"),(0,a.kt)("li",{parentName:"ul"},"Bumped Nexport to 1.5.0")),(0,a.kt)("h2",{id:"api-changes"},"API Changes"),(0,a.kt)("h3",{id:"removal-of-netplayer"},"Removal of NetPlayer"),(0,a.kt)("p",null,"The NetPlayer class has been removed; however, it was replaced with events. This allows developers to still get data as they need, but instead, they cache what they need. The following script demonstrates how to cache the last user position."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'/*\n * An example player object would look like\n * {\n *      "userId": "user_0000...",\n *      "NetworkedObject": null\n * }\n */\nlet playerData = []\n\nfunction getPlayerPosition(userId){\n    for(let i = 0; i < playerData.length; i++){\n        let p = playerData[i]\n        if(p.userId === userId){\n            return p.NetworkedObject.Position\n        }\n    }\n    return undefined\n}\n\nEvents.Subscribe(ScriptEvent.OnNetworkedObject, (userId, coreBone, networkedObject) => {\n    // For our example, we only want the root\n    if(coreBone != CoreBone.Root) return;\n    let found = false;\n    for(let i = 0; i < playerData.length; i++){\n        let p = playerData[i]\n        if(p.userId === userId){\n            // If the object already exists, overwrite the current data\n            p.NetworkedObject = networkedObject\n            found = true\n            break\n        }\n    }\n    if(!found){\n        // The object did not exist, create a new one\n        let newP = {\n            "userId": userId,\n            "NetworkedObject": networkedObject\n        }\n        // Add the object to our cache\n        playerData.push(newP)\n    }\n})\n\n// Remove our Player cache after they leave to not waste memory\nEvents.Subscribe(ScriptEvent.OnUserLeave, userId => {\n    let newPlayers = []\n    for(let i = 0; i < playerData.length; i++){\n        let p = playerData[i]\n        if(p.userId === userId) continue\n        newPlayers.push(p)\n    }\n    playerData = newPlayers\n})\n')),(0,a.kt)("h3",{id:"renaming-of-netplayers-to-instance"},"Renaming of ",(0,a.kt)("inlineCode",{parentName:"h3"},"NetPlayers")," to ",(0,a.kt)("inlineCode",{parentName:"h3"},"Instance")),(0,a.kt)("p",null,"Currently, this API only gets user-specific data; however, will be expanded for more information."),(0,a.kt)("p",null,"Here's what a script could look like"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local host = Players.HostId\nif host == nil or host == "" then return end\nprint("The host is "..host)\n')),(0,a.kt)("p",null,"And the new version"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local host = Instance.HostId\nif host == nil or host == "" then return end\nprint("The host is "..host)\n')))}u.isMDXComponent=!0}}]);