"use strict";(self.webpackChunkhypernex_docs=self.webpackChunkhypernex_docs||[]).push([[6934],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(n),u=r,h=d["".concat(s,".").concat(u)]||d[u]||p[u]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},80715:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=n(87462),r=(n(67294),n(3905));const o={},i="2024.03.1b",l={unversionedId:"changelogs/Hypernex.Unity/2024031b",id:"changelogs/Hypernex.Unity/2024031b",title:"2024.03.1b",description:"Lots of changes in this update! With the introduction of working microphones and even more reduced bandwidth! However, there is a cost to all these new features that developers NEED to be aware of. Lets go into some changes.",source:"@site/docs/changelogs/Hypernex.Unity/2024031b.md",sourceDirName:"changelogs/Hypernex.Unity",slug:"/changelogs/Hypernex.Unity/2024031b",permalink:"/docs/changelogs/Hypernex.Unity/2024031b",draft:!1,editUrl:"https://github.com/TigersUniverse/Hypernex.Docs/docs/changelogs/Hypernex.Unity/2024031b.md",tags:[],version:"current",frontMatter:{},sidebar:"changelogSidebar",previous:{title:"1.2.0",permalink:"/docs/changelogs/Hypernex.Networking/120"},next:{title:"Home",permalink:"/docs/changelogs/"}},s={},m=[{value:"Changes",id:"changes",level:2},{value:"API Changes",id:"api-changes",level:2},{value:"Transform Networking",id:"transform-networking",level:3},{value:"SmoothTransforms",id:"smoothtransforms",level:3},{value:"Parameter Ids",id:"parameter-ids",level:3}],c={toc:m},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"2024031b"},"2024.03.1b"),(0,r.kt)("p",null,"Lots of changes in this update! With the introduction of working microphones and even ",(0,r.kt)("em",{parentName:"p"},"more")," reduced bandwidth! However, there is a cost to all these new features that developers NEED to be aware of. Lets go into some changes."),(0,r.kt)("h2",{id:"changes"},"Changes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Fixed Microphones!",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Microphones are now encoded with Opus properly and don't sound like a jittery mess!"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"HUGE")," Thank you to ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/VirtualBrightPlayz"},"Virtual")," for fixing this!"))),(0,r.kt)("li",{parentName:"ul"},"Fixed Mirrors!",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Now you can Mirror dwell all you want..."))),(0,r.kt)("li",{parentName:"ul"},"Improved bandwidth 10 fold!",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"There was a complete rewrite of the underlying networking of Hypernex.Unity. Please see the API changes for BOTH Hypernex.Unity and Hypernex.Networking!"),(0,r.kt)("li",{parentName:"ul"},"Switched from MessagePack's built-in compression (LZ4) to Meta's ZStandard (zstd)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This has a much higher compression rate with low compression/decompression times (~8-10ms)"))),(0,r.kt)("li",{parentName:"ul"},"Reduced syncing timeframes for PlayerUpdates and WeightedObjectUpdates"),(0,r.kt)("li",{parentName:"ul"},"Bulked WeightedObjectUpdates to reduce bandwidth",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is done by taking a list of all WeightedObjectUpdates, and compressing the whole thing, which yields better compression results."))),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"MessagePackListener.cs")," for developers to debug how much bandwidth they're using.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Shows all messages sent outbound and how much data they are per-second."))),(0,r.kt)("li",{parentName:"ul"},"Bumped Nexport to 1.5.0"))),(0,r.kt)("li",{parentName:"ul"},"SmoothTransforms!",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This allows all NetworkSync components to smoothly transform objects"),(0,r.kt)("li",{parentName:"ul"},"Instead of objects being all jittery moving, they now move nice and smooth!"),(0,r.kt)("li",{parentName:"ul"},"This is also applied to HandleCameras"),(0,r.kt)("li",{parentName:"ul"},"For developers, the smoothing can be controlled from ",(0,r.kt)("inlineCode",{parentName:"li"},"Init.Instance.SmoothingFrames")))),(0,r.kt)("li",{parentName:"ul"},"Made AvatarCreator abstract",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This was for the network rewrite"),(0,r.kt)("li",{parentName:"ul"},"This change allows users to implement their own AvatarCreator abstraction for any purposes"),(0,r.kt)("li",{parentName:"ul"},"For example, there is an AvatarCreator for both LocalPlayers and NetPlayers"))),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"MathF"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Check the Engine API docs for more information!"))),(0,r.kt)("li",{parentName:"ul"},"Fixed Cobalt support",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This fixed the issue where videos would never load"),(0,r.kt)("li",{parentName:"ul"},"This also fixed an issue where having a malformed/unsupported url would never invoke the result of ",(0,r.kt)("inlineCode",{parentName:"li"},"GetOptions()")),(0,r.kt)("li",{parentName:"ul"},"Bumped CobaltSharp to 1.1.0"))),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"LocalAvatar.IsLocalClient()"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Returns ",(0,r.kt)("inlineCode",{parentName:"li"},"true")," if the LocalAvatarScript is being run on the client with the avatar"),(0,r.kt)("li",{parentName:"ul"},"Returns ",(0,r.kt)("inlineCode",{parentName:"li"},"false")," if the LocalAvatarScript is running on a NetPlayer"))),(0,r.kt)("li",{parentName:"ul"},"Improved performance for Handling Blendshapes on NetAvatars"),(0,r.kt)("li",{parentName:"ul"},"Improved Full-Body Tracking with OpenXR"),(0,r.kt)("li",{parentName:"ul"},"Grabbable outlines are now the Primary Vector color for themes"),(0,r.kt)("li",{parentName:"ul"},"Added object to handle LocalPlayerSyncing (",(0,r.kt)("inlineCode",{parentName:"li"},"LocalPlayerSyncController.cs"),")"),(0,r.kt)("li",{parentName:"ul"},"Cleaned up ",(0,r.kt)("inlineCode",{parentName:"li"},"LocalPlayer.cs")," and moved functions to their proper places"),(0,r.kt)("li",{parentName:"ul"},"Refresh list of input devices when opening the General Settings tab"),(0,r.kt)("li",{parentName:"ul"},"Added close button for Warn/Kick Message Window"),(0,r.kt)("li",{parentName:"ul"},"Fixed bug when a Player left an instance, the client would add a NetworkSync to every transform in the loaded scene"),(0,r.kt)("li",{parentName:"ul"},"Fixed bug where disabling a GameObject containing a AvatarNearClip component would break"),(0,r.kt)("li",{parentName:"ul"},"Fixed outline shader only rendering in one eye in VR"),(0,r.kt)("li",{parentName:"ul"},"Fixed issue where bones with different tracking spaces wouldn't have correct head rotations on desktop"),(0,r.kt)("li",{parentName:"ul"},"Fixed issue where Weights would be excluded due to the Reset message arriving after the weight reset"),(0,r.kt)("li",{parentName:"ul"},"Fixed issue where Refreshing the Friends list would clear Instances"),(0,r.kt)("li",{parentName:"ul"},"Fixed issue with Avatars sharing the same AnimatorController"),(0,r.kt)("li",{parentName:"ul"},"Fixed logging issue in ",(0,r.kt)("inlineCode",{parentName:"li"},"FaceTrackingServices.cs")),(0,r.kt)("li",{parentName:"ul"},"Fixed issue where the Client execute button would always be visible"),(0,r.kt)("li",{parentName:"ul"},"Fixed naming for ",(0,r.kt)("inlineCode",{parentName:"li"},"LocalAvatar.IsLocalPlayerId")),(0,r.kt)("li",{parentName:"ul"},"Added ",(0,r.kt)("inlineCode",{parentName:"li"},"Extensions.cs")," to introduce easy methods to get or set information"),(0,r.kt)("li",{parentName:"ul"},"Bumped SteamAudio to 4.5.0"),(0,r.kt)("li",{parentName:"ul"},"Bumped MagicaCloth2 to 2.5.2"),(0,r.kt)("li",{parentName:"ul"},"Bumped DynamicBone to 1.3.3"),(0,r.kt)("li",{parentName:"ul"},"Removed ability to use RAW microphone output"),(0,r.kt)("li",{parentName:"ul"},"Removed ability to Create more than one HandleCamera",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"This is due to a bug. This feature will be re-opened once working and stable")))),(0,r.kt)("h2",{id:"api-changes"},"API Changes"),(0,r.kt)("h3",{id:"transform-networking"},"Transform Networking"),(0,r.kt)("p",null,"Avatar transforms are no longer synced automatically; only required transforms are synced. Here is an example of how transforms are synced and handled."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"LocalPLayerSyncController.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"// Get the Current Instance\nGameInstance gameInstance = GameInstance.FocusedInstance;\n// Don't do anything if it doesn't exist, or isn't open\nif(gameInstance == null || !gameInstance.IsOpen) return;\n// Create a PlayerObjectUpdate\nPlayerObjectUpdate playerObjectUpdate = new PlayerObjectUpdate\n{\n    Auth = new JoinAuth\n    {\n        UserId = APIPlayer.APIUser.Id,\n        TempToken = gameInstance.userIdToken\n    },\n    Objects = GetCoreTransforms()\n};\n// Send the message over an unreliable pipeline\ngameInstance.SendMessage(typeof(PlayerObjectUpdate).FullName, Msg.Serialize(playerObjectUpdate),MessageChannel.Unreliable);\n\nprivate CoreBone TrackerRoleToCoreBone(XRTrackerRole xrTrackerRole)\n{\n    // Simply converts a tracker-role to a CoreBone\n    switch (xrTrackerRole)\n    {\n        case XRTrackerRole.Hip:\n            return CoreBone.Hip;\n        case XRTrackerRole.LeftFoot:\n            return CoreBone.LeftFoot;\n        case XRTrackerRole.RightFoot:\n            return CoreBone.RightFoot;\n    }\n    // If none, assume Camera\n    return CoreBone.Camera;\n}\n\n// Note that all Positions and Rotations are global\nprivate Dictionary<int, NetworkedObject> GetCoreTransforms()\n{\n    Dictionary<int, NetworkedObject> coreTransforms = new Dictionary<int, NetworkedObject>();\n    // If there's no LocalPlayer, return an empty Dictionary\n    LocalPlayer localPlayer = LocalPlayer.Instance;\n    if(localPlayer == null) return;\n    // Root is where the Player's CharacterController is\n    coreTransforms.Add((int) CoreBone.Root, localPlayer.transform.GetNetworkTransform());\n    // Head is usually the Camera, but it could also be the Avatar's head (if it has one)\n    coreTransforms.Add((int) CoreBone.Head,\n        localPlayer.Camera.transform.GetNetworkTransform(localPlayer.transform));\n    if (LocalPlayer.IsVR)\n    {\n        // Almost all VR headsets have a LeftHand and RightHand\n        // The VRIKTarget bones are used only for their VRIK specific calibration\n        // This means that you could transform these bones for specific avatars (if needed)\n        coreTransforms.Add((int) CoreBone.LeftHand,\n            localPlayer.LeftHandVRIKTarget.GetNetworkTransform(localPlayer.transform));\n        coreTransforms.Add((int) CoreBone.RightHand,\n            localPlayer.RightHandVRIKTarget.GetNetworkTransform(localPlayer.transform));\n        if (XRTracker.CanFBT)\n        {\n            // Get all supported trackers (currently Hip, LeftFoot, and RightFoot) and add them\n            foreach (string name in Enum.GetNames(typeof(XRTrackerRole)))\n            {\n                XRTrackerRole xrTrackerRole = (XRTrackerRole) Enum.Parse(typeof(XRTrackerRole), name);\n                if (XRTracker.Trackers.TryFind(\n                        x => x.TrackerRole == xrTrackerRole,\n                        out XRTracker xrTracker))\n                    coreTransforms.Add((int) TrackerRoleToCoreBone(xrTrackerRole),\n                        xrTracker.transform.GetNetworkTransform(localPlayer.transform));\n            }\n        }\n    }\n    // Finally, add any Cameras\n    foreach (HandleCamera handleCamera in HandleCamera.allCameras)\n    {\n        NetworkedObject networkedObject = handleCamera.transform.GetNetworkTransform();\n        networkedObject.IgnoreObjectLocation = true;\n        networkedObject.ObjectLocation = \"*\" + handleCamera.gameObject.name;\n        coreTransforms.Add((int) CoreBone.Camera, networkedObject);\n    }\n    return coreTransforms;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"NetPlayer.cs")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"// This is invoked first whenever the client receives a PlayerObjectUpdate\npublic void NetworkObjectUpdate(PlayerObjectUpdate playerObjectUpdate)\n{\n    foreach (KeyValuePair<int, NetworkedObject> keyValuePair in playerObjectUpdate.Objects)\n    {\n        /*\n         * PLUGIN DEVELOPERS!\n         * If handling custom keys, HarmonyPrefix this function, and don't run the original IF it contains unknown keys.\n         * Simply handle and remove your known keys, then pass the object without keys to the original function\n         * OR\n         * You can rewrite the function to gracefully handle unknown keys with something like an Event\n         * This may be the preferred method for libraries\n         */\n        // Convert the key to a CoreBone\n        CoreBone coreBone = (CoreBone) keyValuePair.Key;\n        // Get the NetworkedObject\n        NetworkedObject networkedObject = keyValuePair.Value;\n        try\n        {\n            if (coreBone == CoreBone.Camera)\n            {\n                // FInd and handle the camera\n                NetHandleCameraLife n = GetHandleCamera(networkedObject.ObjectLocation);\n                n.Ping();\n                SmoothTransform c = n.SmoothTransform;\n                c.Position = NetworkConversionTools.float3ToVector3(networkedObject.Position);\n                c.Rotation = Quaternion.Euler(new Vector3(networkedObject.Rotation.x,\n                    networkedObject.Rotation.y, networkedObject.Rotation.z));\n                c.Scale = new Vector3(0.01f, 0.01f, 0.01f);\n                return;\n            }\n        }\n        // Camera probably wasn't found.\n        catch (Exception) {}\n        // Make sure something required isn't null\n        if (string.IsNullOrEmpty(networkedObject.ObjectLocation))\n            networkedObject.ObjectLocation = \"\";\n        // Update the transform!\n        UpdatePlayerUpdate(coreBone, networkedObject);\n    }\n}\n\nprivate void UpdatePlayerUpdate(CoreBone coreBone, NetworkedObject networkedObject)\n{\n    // If a SmoothTransform doesn't exist, create and cache it!\n    if (!smoothTransforms.TryGetValue(coreBone, out SmoothTransform smoothTransform))\n    {\n        smoothTransform = new SmoothTransform(GetReferenceFromCoreBone(coreBone), false);\n        if (smoothTransforms.ContainsKey(coreBone)) smoothTransforms.Remove(coreBone);\n        smoothTransforms.Add(coreBone, smoothTransform);\n    }\n    // Update the SmoothTransform\n    networkedObject.Apply(smoothTransform);\n}\n")),(0,r.kt)("h3",{id:"smoothtransforms"},"SmoothTransforms"),(0,r.kt)("p",null,"SmoothTransform is a new tool that allows transforms to be smoothly moved from point A to point B. The example below demonstrates how to create a GameObject that uses a SmoothTransform to set it's position, when the GameObject is not being driven by an outside factor."),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"SmoothTransforms are ",(0,r.kt)("strong",{parentName:"p"},"NOT")," thread-safe. Do not touch them outside of the main thread.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},'public class MySmoothTransformDriver : MonoBehaviour\n{\n    // This would be set to true when an outside factor needs to control the transform\n    public bool isBeingDriven = false;\n\n    private GameObject gameObject;\n    private SmoothTransform smoothTransform;\n\n    public MySmoothTransformDriver()\n    {\n        GameObject gameObject = new GameObject("ExampleObject");\n        SmoothTransform smoothTransform = new SmoothTransform(gameObject.transform, false);\n    }\n\n    public void MoveTransformGlobal(Vector3 position, Quaternion rotation, Vector3 scale)\n    {\n        smoothTransform.SetLocalSpace(false);\n        MoveTransform(position, rotation, scale);\n    }\n\n    public void MoveTransformLocal(Vector3 position, Quaternion rotation, Vector3 scale)\n    {\n        smoothTransform.SetLocalSpace(true);\n        MoveTransform(position, rotation, scale);\n    }\n\n    private void MoveTransform(Vector3 position, Quaternion rotation, Vector3 scale)\n    {\n        // Doesn\'t make a difference, but it may for your use-case\n        if(isBeingDriven) return;\n        // Update transforms\n        smoothTransform.Position = position;\n        smoothTransform.Rotation = rotation;\n        smoothTransform.Scale = scale;\n    }\n\n    void Update()\n    {\n        // Tell the SmoothTransform to stop smoothening the transform and just pull data from it instead when isBeingDriven is true\n        smoothTransform.PullFromTransform = isBeingDriven;\n        // Update the SmoothTransform (will also update the position/rotation/scale is smoothTransform.PullFromTransform is false)\n        smoothTansform.Update();\n    }\n}\n')),(0,r.kt)("h3",{id:"parameter-ids"},"Parameter Ids"),(0,r.kt)("p",null,"There are new Parameter Ids for ",(0,r.kt)("inlineCode",{parentName:"p"},"WeightedObjectUpdates")," when being handled by a NetPlayer!"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"*main"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Applies the parameter to the AvatarCreator's MainAnimator"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"*all"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Applies the parameter to all AvatarCreator Animators (including playables)")))))}p.isMDXComponent=!0}}]);